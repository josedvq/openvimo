"use strict";(self.webpackChunkopenvimo=self.webpackChunkopenvimo||[]).push([[651],{2692:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"coding_experiment","title":"Getting started with OpenVIMO","description":"In this tutorial we will go over coding and running OpenVIMO HITs. We will explain and execute two different designs:","source":"@site/docs/coding_experiment.mdx","sourceDirName":".","slug":"/coding_experiment","permalink":"/openvimo/docs/coding_experiment","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/coding_experiment.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Concepts","permalink":"/openvimo/docs/concepts"},"next":{"title":"Deploying online","permalink":"/openvimo/docs/deployment"}}');var o=t(4848),s=t(8453),r=t(6025);const a={sidebar_position:4},c="Getting started with OpenVIMO",l={},d=[{value:"Sample 1: meeting room",id:"sample-1-meeting-room",level:3},{value:"Sample 2: dyadic conversations",id:"sample-2-dyadic-conversations",level:3}];function p(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"getting-started-with-openvimo",children:"Getting started with OpenVIMO"})}),"\n",(0,o.jsx)(n.p,{children:"In this tutorial we will go over coding and running OpenVIMO HITs. We will explain and execute two different designs:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"simple meeting room where anybody with the URL can join the conversation."}),"\n",(0,o.jsx)(n.li,{children:"more complex dyadic interaction where subjects fill individual questionnaires and participate in a joint videocall."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"sample-1-meeting-room",children:"Sample 1: meeting room"}),"\n",(0,o.jsx)(n.p,{children:"Here we create a simple covfee app for meeting rooms with shareable URLs. This can function as a flexible deployment for holding (regular) meetings in covfee and recording them into a dataset."}),"\n",(0,o.jsx)(n.p,{children:"In covfee experiments (HITs) are always specified by a list of nodes or tasks, and a list of journeys or paths through those nodes. Each of these journeys maps to a URL, and normally to one participant. However, because in this case we want to allow an arbitrary number of participants to join the videocall using the same URL, we will create a single journey. The graph structure of this deployment is therefore very simple:"}),"\n",(0,o.jsx)("div",{class:"text--center",children:(0,o.jsx)("img",{src:(0,r.Ay)("/img/g_meeting.png"),width:"250"})}),"\n",(0,o.jsx)(n.p,{children:"First we will create a folder for the covfee project. This folder may be anywhere in the file system. Then we will create the following structure:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"my_folder\n    - meeting.py\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The naming is not relevant. Paste the following into the ",(0,o.jsx)(n.code,{children:"meeting.py"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from covfee import HIT, Project, tasks\nfrom covfee.config import config\nfrom covfee.shared.dataclass import CovfeeApp\n\nconfig.load_environment("local")\n\nspec_meeting = {\n    "name": "Videocall",\n    "serverRecording": {\n        "hasAudio": True,\n        "hasVideo": True,\n        "outputMode": "INDIVIDUAL",\n    },\n}\n\nt1 = tasks.VideocallTaskSpec(**spec_meeting)\nhit = HIT("Videocalling")\nhit.add_journey(nodes=[t1])\n\nprojects = [Project("My Project", email="example@example.com", hits=[hit])]\napp = CovfeeApp(projects)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Here we import the necessary classes, create a VideocallTaskSpecs object holding the specification of our videocalling task, and assign it to a journey, a HIT and a project (",(0,o.jsx)(n.a,{href:"concepts",children:"more information"}),"). Finally, we create the ",(0,o.jsx)(n.code,{children:"app"})," object. Covfee internally looks for this object by name (important that it is called ",(0,o.jsx)(n.code,{children:"app"}),") and uses it as starting point to read the specification."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The full list of options for the VideocallTaskSpec is provided ",(0,o.jsx)(n.a,{href:"#configuration-options",children:"below"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"That is all! We are now ready to start Covfee:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"covfee make meeting.py --force\n"})}),"\n",(0,o.jsx)(n.p,{children:"This will parse the specification, create the database, and start the covfee server."}),"\n",(0,o.jsxs)(n.p,{children:["After this the Covfee admin panel should be accessible in the URL displayed when running the Covfee server (",(0,o.jsx)(n.a,{href:"http://localhost:5001/admin#",children:"http://localhost:5001/admin#"})," by default)."]}),"\n",(0,o.jsx)(n.h3,{id:"sample-2-dyadic-conversations",children:"Sample 2: dyadic conversations"}),"\n",(0,o.jsx)(n.p,{children:"This sample creates a more complex HIT structure. Here we want two subjects to fill in individual consent forms, then have a videocall together, and then fill in post-experiment surveys. The graph structure for this interaction is:"}),"\n",(0,o.jsx)("div",{class:"text--center",children:(0,o.jsx)("img",{src:(0,r.Ay)("/img/g_dyadic.png"),width:"600"})}),"\n",(0,o.jsx)(n.p,{children:"We can code this structure with the following code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# from covfee import Task, HIT\nfrom covfee import HIT, Project, tasks\nfrom covfee.config import config\nfrom covfee.shared.dataclass import CovfeeApp\n\nconfig.load_environment("local")\n\nspec_consent_form = {\n    "name": "Consent",\n    "content": {"type": "link", "url": "$$www$$/consent.md"},\n    "form": {\n        "fields": [\n            {\n                "name": "name",\n                "label": "Full name:",\n                "required": True,\n                "input": {"inputType": "Input"},\n            },\n            {\n                "name": "consent",\n                "label": "To proceed, you must expressly provide consent per the terms above.",\n                "required": True,\n                "input": {\n                    "inputType": "Checkbox.Group",\n                    "options": [\n                        {\n                            "label": "I consent to the sharing of my personal data.",\n                            "value": "yes",\n                        }\n                    ],\n                },\n            },\n        ]\n    },\n}\n\nspec_instructions = {\n    "name": "Instructions",\n    "prerequisite": True,\n    "content": {"type": "link", "url": "$$www$$/instructions.md"},\n    "form": {\n        "fields": [\n            {\n                "name": "agreement",\n                "label": "To proceed, you must expressly agree to the provided instructions.",\n                "required": True,\n                "input": {\n                    "inputType": "Checkbox.Group",\n                    "options": [\n                        {\n                            "label": "I agree with the provided instructions.",\n                            "value": "yes",\n                        }\n                    ],\n                },\n            }\n        ]\n    },\n}\n\nspec_videocall = {\n    "name": "Videocall",\n}\n\nspec_final_survey = {\n    "name": "Final Survey",\n    "form": {\n        "fields": [\n            {\n                "name": "enjoyment",\n                "label": "Did you enjoy your interaction?",\n                "required": True,\n                "input": {\n                    "inputType": "Radio.Group",\n                    "options": ["Yes", "No"],\n                },\n            }\n        ]\n    },\n}\nj1_consent = tasks.InstructionsTaskSpec(**spec_consent_form)\nj1_instructions = tasks.InstructionsTaskSpec(**spec_instructions)\nj1_final = tasks.QuestionnaireTaskSpec(**spec_final_survey)\n\nj2_consent = tasks.InstructionsTaskSpec(**spec_consent_form)\nj2_instructions = tasks.InstructionsTaskSpec(**spec_instructions)\nj2_final = tasks.QuestionnaireTaskSpec(**spec_final_survey)\n\nvideocall_task = tasks.VideocallTaskSpec(**spec_videocall)\n\n\nhit = HIT("Dyadic videocall")\nj1 = hit.add_journey(nodes=[j1_consent, j1_instructions, videocall_task, j1_final])\nj1 = hit.add_journey(nodes=[j2_consent, j2_instructions, videocall_task, j2_final])\n\nprojects = [Project("My Project", email="example@example.com", hits=[hit])]\napp = CovfeeApp(projects)\n\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);