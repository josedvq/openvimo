"use strict";(self.webpackChunkopenvimo=self.webpackChunkopenvimo||[]).push([[869],{5430:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"concepts","title":"Concepts","description":"What is covfee?","source":"@site/docs/concepts.mdx","sourceDirName":".","slug":"/concepts","permalink":"/openvimo/docs/concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/concepts.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/openvimo/docs/installation"},"next":{"title":"Getting started with OpenVIMO","permalink":"/openvimo/docs/coding_experiment"}}');var i=t(4848),s=t(8453),a=t(6025);const r={sidebar_position:3},c="Concepts",l={},d=[{value:"What is covfee?",id:"what-is-covfee",level:2},{value:"What covfee is not:",id:"what-covfee-is-not",level:4},{value:"The covfee workflow",id:"the-covfee-workflow",level:2},{value:"Covfee Concepts",id:"covfee-concepts",level:2},{value:"The HIT",id:"the-hit",level:3},{value:"Journeys and Tasks",id:"journeys-and-tasks",level:3},{value:"Projects",id:"projects",level:3}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"concepts",children:"Concepts"})}),"\n",(0,i.jsx)(n.h2,{id:"what-is-covfee",children:"What is covfee?"}),"\n",(0,i.jsxs)(n.p,{children:["Covfee is an extensible web framework for data collection and annotation, built for ",(0,i.jsx)(n.strong,{children:"crowd-sourcing"})," and other online uses. Covfee has the goal of providing a framework for:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Researchers with little programming knowledge to be able to collect data online using a combination of surveys and more advanced configurable apps such as annotation interfaces, videocalling and online games."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Programmers and esearchers with more advanced technical skills in Javascript to be able to efficiently prototype and deploy custom interfaces or apps for data collection and annotation; or to adapt Covfee's existing apps. Implementing custom covfee tasks has been boiled down to the writing of a single class (React component). Client-server communication and data storage are handled by Covfee."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"what-covfee-is-not",children:"What covfee is not:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"A complete platform"}),". Covfee is still under heavy development and does not offer some features that other annotation software does have. The focus has been on producing a framework to enable developers to contribute such features to the community."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enterprise-level software"}),". Covfee is meant to facilitate research and experimentation. It is not yet thoroughly tested and contains bugs."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"the-covfee-workflow",children:"The covfee workflow"}),"\n",(0,i.jsx)("img",{alt:"Docusaurus with Keytar",src:(0,a.Ay)("/img/covfee_main.png")}),"\n",(0,i.jsx)(n.p,{children:"Once covfee is installed, working with Covfee as a requestor generally means following the three steps shown in the picture:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The requestor creates a project specification in a Python file, which completely specifies the annotation interface."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The requestor runs ",(0,i.jsx)(n.code,{children:"covfee make"}),", the script in charge of validating the specification and generating the covfee interface from it. The requestor can now enter the covfee admin panel and obtain anonymized links to each HIT in the specification. A CSV file with all the links can be downloaded to be uploaded to Amazon MTurk or otherwise shared with the annotators or study participants."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The requestor may keep track and manage the annotation process using the admin panel. At any time it is possible to download the raw data in JSON and CSV files, which can then be processed locally."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"covfee-concepts",children:"Covfee Concepts"}),"\n",(0,i.jsx)(n.p,{children:"Here we define the nomenclature used within Covfee to talk about online experiments and their sub-parts."}),"\n",(0,i.jsx)(n.h3,{id:"the-hit",children:"The HIT"}),"\n",(0,i.jsxs)(n.p,{children:["The main unit in Covfee is possibly the HIT (Human Intelligence Task). Despite the name, in crowd-sourcing settings the term HIT is often used to denote ",(0,i.jsx)(n.strong,{children:"multiple"})," tasks performed by an annotator or experiment subject. What distinguishes the HIT is that it is independent of any other HITs and it cannot be (or may not be convenient to) split into independent sub-units. Each HIT is normally identified by a single URL and is paid when completed. In Covfee we generalize this idea by using the term HIT to denote one or more tasks performed by one or more experiment subjects or annotators. For example, a HIT may be an online video conversation, or a game of chess to be completed by two people. The same HIT may include separate demographic questionnaires and post-experiment questionnaires for both participants."]}),"\n",(0,i.jsx)(n.p,{children:"In covfee, a HIT is specified via it's graph structure. Our videocall example can be drawn as follows:"}),"\n",(0,i.jsx)("div",{class:"text--center",children:(0,i.jsx)("img",{src:(0,a.Ay)("/img/covfee_entities_1.png"),width:"800"})}),"\n",(0,i.jsx)(n.h3,{id:"journeys-and-tasks",children:"Journeys and Tasks"}),"\n",(0,i.jsx)(n.p,{children:"A HIT is composed of one or multiple Tasks, and one or multiple Journeys or paths through the Tasks. In Covfee, these paths must be acyclic but may be assymetric (ie. subjects may follow different paths). Each Journey is mapped to a URL by Covfee, which when opened accesses the current node/task for that HIT. In most cases tasks are to be completed in order."}),"\n",(0,i.jsx)(n.p,{children:"Usinc Covfee consists in specifying one or multiple HITs. Once done, a HIT specification can be instantiated any number of times. Each time, a blank HIT instance with a new, unique set of Journey URLs will be generated."}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsx)(n.p,{children:"Note the subtle distinction between HIT specification and HIT instance. Strictly, using Covfee involves creating HIT specifications (generic templates). Covfee translates these internally into HIT instances, which are concrete HITs, with resolved URLs attached to their Journeys. In other words, researchers work with HIT specifications, experiment subjects solve HIT instances."}),(0,i.jsx)(n.p,{children:"In practice, we might use the term HIT to refer to both specifications and instances when the context is clear."})]}),"\n",(0,i.jsx)(n.h3,{id:"projects",children:"Projects"}),"\n",(0,i.jsx)(n.p,{children:"A Covfee Project may contain multiple different HIT specifications. A common case is to specify a HIT per experimental condition. In summary the following is the hierarchy used in Covfee, with examples for a Project, HIT, Journey and Task:"}),"\n",(0,i.jsx)("div",{class:"text--center",children:(0,i.jsx)("img",{src:(0,a.Ay)("/img/covfee_entities_2.png"),width:"600"})}),"\n",(0,i.jsx)(n.p,{children:"Finally, a Covfee app may also contain multiple independent Projects."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(6540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);